/*******************************************************************************
 * Copyright (c) 2016-2017 Istvan David
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Istvan David - initial API and implementation
 *******************************************************************************/

package be.uantwerpen.msdl.icm.queries.allocation

import "metamodels.processmodel"
import "metamodels.pm"
import "metamodels.resources"
import be.uantwerpen.msdl.icm.queries.general.compoundActivity

pattern allocatedActivity(activity: Activity, allocation: Allocation, resource: Resource){
	neg find compoundActivity(activity);
	Activity.allocation(activity, allocation);
	Allocation.resource(allocation, resource);
}

pattern unAllocatedActivity(activity: Activity){
	neg find compoundActivity(activity);
	neg find allocatedActivity(activity, _, _);
}

pattern demand(activity: Activity, demand: Demand, resourceType: ResourceType){
	neg find compoundActivity(activity);
	Activity.demand(activity, demand);
	Demand.resourceType(demand, resourceType);
}

pattern resourceInstance(resource: Resource, resourceType: ResourceType){
	Resource.typedBy(resource, resourceType);
}

pattern unsatisfiedDemand(activity: Activity){
	neg find compoundActivity(activity);
	
	find demand(activity, demand, resourceType);
	find allocatedActivity(activity, allocation, resource);	
	
	find resourceInstance(resource, resourceType);
	
	Demand.amount(demand, dAmount);
	Allocation.amount(allocation, aAmount);
	
	check(aAmount < dAmount);
}

pattern satisfiedDemand(activity: Activity){
	neg find compoundActivity(activity);
	neg find unsatisfiedDemand(activity);
}

pattern satisfiableDemand(activity: Activity, resourceType: ResourceType){
	neg find compoundActivity(activity);
	
	find demand(activity, demand, resourceType);
	
	find resourceInstance(resource, resourceType);
	
	Demand.amount(demand, dAmount);
	Resource.availability(resource, availability);
	
	check(availability >= dAmount);
}

pattern unsatisfiableDemand(activity: Activity, resourceType: ResourceType){
	neg find compoundActivity(activity);
	
	find demand(activity, demand, resourceType);
	
	find resourceInstance(resource, resourceType);
	
	Demand.amount(demand, dAmount);
	Resource.availability(resource, availability);
	
	check(availability < dAmount);
}