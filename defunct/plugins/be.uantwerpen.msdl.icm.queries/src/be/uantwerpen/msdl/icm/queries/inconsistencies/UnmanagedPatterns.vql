/*******************************************************************************
 * Copyright (c) 2016-2017 Istvan David
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Istvan David - initial API and implementation
 *******************************************************************************/

package be.uantwerpen.msdl.icm.queries.inconsistencies

import "metamodels.pm"
import "metamodels.properties"

pattern unmanagedReadModify(activity1: Activity, property1: Property, activity2: Activity, property2: Property){
	find readModifySharedProperty(activity1, property1, activity2, property2);
//	checkProperty == count find checkProperty(activity2, _, property1);
	checkProperty == count find checkProperty2(_, _, _, activity1, activity2, property1);
	contracts == count find contract(_, activity1, property1);
	check(checkProperty+contracts==0);
}

pattern unmanagedModifyModifyParallel(activity1: Activity, property1: Property, activity2: Activity, property2: Property, fork: Fork){
	find modifyModifySharedPropertyParallel(activity1, property1, activity2, property2, fork);
	contract1 == count find contract(_, activity1, property1);
	contract2 == count find contract(_, activity2, property2);
	check(contract1<1);
	check(contract2<1);
}

pattern unmanagedModifyModifySequential(activity1: Activity, property1: Property, activity2: Activity, property2: Property){
	find modifyModifySharedPropertySequential(activity1, property1, activity2, property2);
	contract1 == count find contract(_, activity1, property1);
	contract2 == count find contract(_, activity2, property2);
	checkProperty == count find checkProperty2(_, _, _, activity1, activity2, property1);	//Enough to check the first property
	check(contract1+checkProperty<1);
	check(contract2+checkProperty<1);
}

//pattern unmanaged(activity1: Activity, property1: Property, activity2: Activity, property2: Property){
//	find unmanagedReadModify(activity1, property1, activity2, property2);
//}
//or{
//	find unmanagedModifyModify(activity1, property1, activity2, property2);
//}

pattern unmanagedReadModify2(activity1: Activity, property1: Property, activity2: Activity, property2: Property){
	find unmanagedReadModify(activity1, property1, activity2, property2);
}

pattern unmanagedReadModify3(activity1: Activity, property1: Property, activity2: Activity, property2: Property){
	find unmanagedReadModify(activity1, property1, activity2, property2);
}