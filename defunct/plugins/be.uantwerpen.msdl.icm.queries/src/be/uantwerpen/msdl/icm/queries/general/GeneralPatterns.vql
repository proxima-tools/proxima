/*******************************************************************************
 * Copyright (c) 2016-2017 Istvan David
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Istvan David - initial API and implementation
 *******************************************************************************/

package be.uantwerpen.msdl.icm.queries.general

import "metamodels.processmodel"
import "metamodels.pm"
import "metamodels.properties"

pattern controlFlow(process: Process, controlFlow: ControlFlow){
	Process.controlFlow(process, controlFlow);
}

pattern intent(activity: Activity, intentSubject: IntentSubject, intent: Intent){
	Intent.activity(intent, activity);
	Intent.subject(intent, intentSubject);
}

pattern readIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::READ);
}

pattern modifyIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::MODIFY);
}

pattern checkIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::CHECK_PROPERTY);
}

pattern checkIntentOnSubject(activity: Activity, intentSubject: IntentSubject){
	find intent(activity, intentSubject, intent);
	Intent.type(intent, IntentType::CHECK_PROPERTY);
}

pattern contractIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::CONTRACT);
}

pattern lockIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::LOCK);
}

pattern releaseIntentOnProperty(activity: Activity, property: Property){
	find intent(activity, property, intent);
	Intent.type(intent, IntentType::RELEASE);
}

pattern controlFlowBetweenNodes(node1: Node, node2: Node, controlFlow: ControlFlow){
	ControlFlow.from(controlFlow, node1);
	ControlFlow.to(controlFlow, node2);
}

pattern hardControlFlowBetweenActivities(activity1: Activity, activity2: Activity, controlFlow: ControlFlow){
	find controlFlowBetweenNodes(activity1, activity2, controlFlow);
	ControlFlow.final(controlFlow, f);
	f == true;
}

pattern softControlFlowBetweenActivities(activity1: Activity, activity2: Activity, controlFlow: ControlFlow, process: Process){
	find controlFlowBetweenNodes(activity1, activity2, controlFlow);
	ControlFlow.final(controlFlow, f);
	Process.controlFlow(process, controlFlow);
	f != true;
}

pattern independentNodes(activity1: Activity, activity2: Activity, process: Process){
	neg find controlFlowBetweenNodes(activity1, activity2, _);
	Process.node(process, activity1);
	Process.node(process, activity2);
}or{
	find softControlFlowBetweenActivities(activity1, activity2, _, process);
}

pattern nodeControlOutput(node : Node, controlFlow: ControlFlow){
	Node.controlOut(node, controlFlow);
}

pattern nodeControlInput(node : Node, controlFlow: ControlFlow){
	Node.controlIn(node, controlFlow);
}

pattern compoundActivity(node: Node){
	CompoundActivity(node);
}

pattern decision(node : Node){
	Decision(node);
}

pattern join(node: Node){
	Join(node);
}

pattern fork(node: Node){
	Fork(node);
}

pattern correspondingJoin(fork: Fork, join: Join){
	Fork.correspondingJoin(fork, join);
}

pattern correspondingFork(join: Join, fork: Fork){
	Join.correspondingFork(join, fork);
}

pattern nodeDirectlyReachableFromNode(toNode: Node, fromNode: Node){
	neg find compoundActivity(toNode);
	neg find compoundActivity(fromNode);
	ControlFlow.from(controlFlow, fromNode);
	ControlFlow.to(controlFlow, toNode);
	ControlFlow.feedback(controlFlow, feedback);
	feedback == false;
}
//or{
//	neg find compoundActivity(toNode);
//	neg find compoundActivity(fromNode);
//	Node.dataFlowFrom(fromNode, toNode);
//	Node.dataFlowTo(toNode, fromNode);
//}

pattern nodeDirectlyReachableFromNodeViaFeedback(toNode: Node, fromNode: Node){
	neg find compoundActivity(toNode);
	neg find compoundActivity(fromNode);
	ControlFlow.from(controlFlow, fromNode);
	ControlFlow.to(controlFlow, toNode);
}
//or{
//	neg find compoundActivity(toNode);
//	neg find compoundActivity(fromNode);
//	Node.dataFlowFrom(fromNode, toNode);
//	Node.dataFlowTo(toNode, fromNode);
//}

pattern nodeGloballyReachableFromNode(toNode: Node, fromNode: Node){
	find nodeDirectlyReachableFromNode+(toNode, fromNode);
}

pattern nodeReachableViaFeedback(toNode: Node, fromNode: Node){
	find nodeDirectlyReachableFromNodeViaFeedback+(toNode, fromNode);
}

pattern parallelActivities(activity1: Activity, activity2: Activity){
	find parallelActivities2(activity1, activity2, _, _);
}

pattern parallelActivities2(activity1: Activity, activity2: Activity, fork: Fork, join: Join){
	neg find compoundActivity(activity1);
	neg find compoundActivity(activity2);
	activity1 != activity2;
	
	Fork.correspondingJoin(fork, join);
	Join.correspondingFork(join, fork);

	find nodeGloballyReachableFromNode(activity1, fork);
	find nodeGloballyReachableFromNode(activity2, fork);
	find nodeGloballyReachableFromNode(join, activity1);
	find nodeGloballyReachableFromNode(join, activity2);
	
	neg find nodeGloballyReachableFromNode(activity1, activity2);
	neg find nodeGloballyReachableFromNode(activity2, activity1);
}

pattern sequentialActivities(activity1: Activity, activity2: Activity){
	neg find compoundActivity(activity1);
	neg find compoundActivity(activity2);
	activity1 != activity2;
	
	find nodeGloballyReachableFromNode(activity2, activity1);
	neg find parallelActivities(activity1, activity2);
}

pattern sequentialActivitiesDirect(activity1: Activity, activity2: Activity){
	neg find compoundActivity(activity1);
	neg find compoundActivity(activity2);
	activity1 != activity2;
	
	find nodeDirectlyReachableFromNode(activity2, activity1);
	neg find parallelActivities(activity1, activity2);
}



pattern associatedProperties(property1: Property, link1: RelationshipLink, property2: Property, link2: RelationshipLink){
//	property1 != property2;
	Relationship.relationshipLink(relationship, link1);
	Property.subjectOf(property1, link1);
	
	Relationship.relationshipLink(relationship, link2);
	Property.subjectOf(property2, link2);
}

pattern propertyDirectlyReachableFromProperty(toProperty: Property, fromProperty: Property){
	find associatedProperties(toProperty, toPropertyLink, fromProperty, fromPropertyLink);
	RelationshipLink.direction(fromPropertyLink, RelationshipDirection::UNDIRECTED);
	RelationshipLink.direction(toPropertyLink, RelationshipDirection::UNDIRECTED);
}or{
	find associatedProperties(toProperty, toPropertyLink, fromProperty, fromPropertyLink);
	RelationshipLink.direction(fromPropertyLink, RelationshipDirection::RELATIONSHIP);
	RelationshipLink.direction(toPropertyLink, RelationshipDirection::PROPERTY);
}or{
	find associatedProperties(toProperty, toPropertyLink, fromProperty, fromPropertyLink);
	RelationshipLink.direction(fromPropertyLink, RelationshipDirection::PROPERTY);
	RelationshipLink.direction(toPropertyLink, RelationshipDirection::PROPERTY);
}or{
	toProperty==fromProperty;
}

pattern propertyGloballyReachableFromProperty(toProperty: Property, fromProperty: Property){
//	toProperty != fromProperty;
	find propertyDirectlyReachableFromProperty+(toProperty, fromProperty);
}

pattern intentSubjectGloballyReachableFromProperty(intentSubject: IntentSubject, property: Property){
	RelationshipSubject.subjectOf(intentSubject, link);
	RelationshipLink.subject(link, property1);
	find propertyDirectlyReachableFromProperty+(property1, property);
}

//pattern objectFlowBetweenIndependentActivities(activity1: Activity, activity2: Activity){
//	find controlFlowBetweenNodes(activity1, activity2, _);
//	
//	Object.dataFlowFrom(object, activity1);
//	Object.dataFlowTo(object, activity2);
//}
//
//pattern independentNodes(process: Process, node1: Node, node2: Node){
//	Process.node(process, node1);
//	Process.node(process, node2);
//	node1!=node2;
//	neg find controlFlowBetweenNodes(node1, node2, _);
//}
//pattern independentActivities(process: Process, activity1: Activity, activity2: Activity){
//	find independentNodes(process, activity1, activity2);
//}
//
//pattern independentNodes2(process: Process, node1: Node, node2: Node){
//	find independentNodes(process, node1, node2);
//}